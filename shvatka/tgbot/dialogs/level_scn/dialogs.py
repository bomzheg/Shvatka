from aiogram import F
from aiogram_dialog import Dialog, Window
from aiogram_dialog.widgets.input import TextInput
from aiogram_dialog.widgets.kbd import Button, Cancel, ScrollingGroup, Select
from aiogram_dialog.widgets.text import Const, Jinja

from shvatka.tgbot import states
from .getters import get_time_hints, get_level_id, get_level_data, get_keys, get_bonus_keys
from .handlers import (
    process_time_hint_result,
    start_add_time_hint,
    process_id,
    save_level,
    save_hints,
    process_level_result,
    start_keys,
    start_hints,
    not_correct_id,
    check_level_id,
    on_start_level_edit,
    on_start_hints_edit,
    convert_keys,
    on_correct_keys,
    not_correct_keys,
    clear_hints,
    convert_bonus_keys,
    on_correct_bonus_keys,
    not_correct_bonus_keys,
    start_bonus_keys,
    start_edit_time_hint,
)

level = Dialog(
    Window(
        Const(
            "<b>ID —É—Ä–æ–≤–Ω—è</b>\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –¥–∞–π —É—Ä–æ–≤–Ω—é –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (ID) (—Ü–∏—Ñ—Ä—ã, –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã). "
            "–û–Ω–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã, "
            "–¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç–∏ —É—Ä–æ–≤–Ω–µ–π.\n"
            "\n"
            "–í–Ω–∏–º–∞–Ω–∏–µ! ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å "
            "–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –¥–∞—é—â–∏—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ "
            "–∫–ª—é—á–∞—Ö, –ª–æ–∫–∞—Ü–∏—è—Ö –∏ –¥—Ä—É–≥–æ–π —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ "
            "–ø–æ—Å–∫–æ–ª—å–∫—É ID –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –ª–æ–≥-—Ñ–∞–π–ª—ã, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ "
            "–¥–ª—è —á—Ç–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
        ),
        TextInput(
            type_factory=check_level_id,
            on_error=not_correct_id,
            on_success=process_id,
            id="level_id",
        ),
        state=states.LevelSG.level_id,
    ),
    Window(
        Jinja(
            "–ù–∞–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è {{level_id}}:\n"
            "{% if keys %}"
            "üîë–ö–ª—é—á–µ–π: {{ keys | length }}\n"
            "{% else %}"
            "üîë–ö–ª—é—á–∏ –Ω–µ –≤–≤–µ–¥–µ–Ω—ã\n"
            "{% endif %}"
            "{% if bonus_keys %}"
            "üí∞–ë–æ–Ω—É—Å–Ω—ã—Ö –∫–ª—é—á–µ–π: {{bonus_keys | length}}\n"
            "{% endif %}"
            "\nüí°–ü–æ–¥—Å–∫–∞–∑–∫–∏:\n"
            "{% if time_hints %}"
            "{{time_hints | time_hints}}"
            "{% else %}"
            "–ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π"
            "{% endif %}"
        ),
        Button(Const("üîë–ö–ª—é—á–∏"), id="keys", on_click=start_keys),
        Button(Const("üí∞–ë–æ–Ω—É—Å–Ω—ã–µ –∫–ª—é—á–∏"), id="bonus_keys", on_click=start_bonus_keys),
        Button(Const("üí°–ü–æ–¥—Å–∫–∞–∑–∫–∏"), id="hints", on_click=start_hints),
        Button(
            Const("‚úÖ–ì–æ—Ç–æ–≤–æ, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å"),
            id="save",
            on_click=save_level,
            when=F["dialog_data"]["keys"] & F["dialog_data"]["time_hints"],
        ),
        state=states.LevelSG.menu,
        getter=get_level_data,
        preview_data={
            "level_id": "Pinky Pie",
        },
    ),
    on_process_result=process_level_result,
)

level_edit_dialog = Dialog(
    Window(
        Jinja(
            "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è {{level_id}}:\n"
            "{% if keys %}"
            "üîë–ö–ª—é—á–µ–π: {{ keys | length }}\n"
            "{% else %}"
            "üîë–ö–ª—é—á–∏ –Ω–µ –≤–≤–µ–¥–µ–Ω—ã\n"
            "{% endif %}"
            "{% if bonus_keys %}"
            "üí∞–ë–æ–Ω—É—Å–Ω—ã—Ö –∫–ª—é—á–µ–π: {{bonus_keys | length}}\n"
            "{% endif %}"
            "\nüí°–ü–æ–¥—Å–∫–∞–∑–∫–∏:\n"
            "{% if time_hints %}"
            "{{time_hints | time_hints}}"
            "{% else %}"
            "–ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π"
            "{% endif %}"
        ),
        Button(Const("üîë–ö–ª—é—á–∏"), id="keys", on_click=start_keys),
        Button(Const("üí∞–ë–æ–Ω—É—Å–Ω—ã–µ –∫–ª—é—á–∏"), id="bonus_keys", on_click=start_bonus_keys),
        Button(Const("üí°–ü–æ–¥—Å–∫–∞–∑–∫–∏"), id="hints", on_click=start_hints),
        Button(
            Const("‚úÖ–ì–æ—Ç–æ–≤–æ, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å"),
            id="save",
            on_click=save_level,
            when=F["dialog_data"]["keys"] & F["dialog_data"]["time_hints"],
        ),
        Cancel(Const("üîô–ù–∞–∑–∞–¥")),
        state=states.LevelEditSg.menu,
        getter=get_level_data,
        preview_data={
            "level_id": "Pinky Pie",
        },
    ),
    on_process_result=process_level_result,
    on_start=on_start_level_edit,
)

keys_dialog = Dialog(
    Window(
        Jinja("–£—Ä–æ–≤–µ–Ω—å <b>{{level_id}}</b>\n\n"),
        Const("üîë<b>–ö–ª—é—á–∏ —É—Ä–æ–≤–Ω—è</b>\n"),
        Jinja(
            "–°–µ–π—á–∞—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–ª—é—á–∏:\n"
            "{% for key in keys %}"
            "üîë<code>{{key}}</code>\n"
            "{% endfor %}"
            "\n –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∫–ª—é—á–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ",
            when=F["keys"],
        ),
        Const(
            "–û—Ç–ª–∏—á–Ω–æ, –ø–µ—Ä–µ–π–¥—ë–º –∫ –∫–ª—é—á–∞–º. –ö–ª—é—á–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö: ", when=~F["keys"]
        ),
        Const(
            "<code>SH–°–õ–û–í–û –°–•–°–õ–û–í–û</code>.\n"
            "–ï—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π –Ω–∞–ø–∏—à–∏—Ç–µ –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "<pre>"
            "–°–•–°–õ–û–í–û1\n"
            "–°–•–°–õ–û–í–û2\n"
            "–°–•–°–õ–û–í–û3\n"
            "</pre>"
        ),
        Cancel(Const("üîô–ù–∞–∑–∞–¥")),
        TextInput(
            type_factory=convert_keys,
            on_success=on_correct_keys,
            on_error=not_correct_keys,
            id="keys_input",
        ),
        state=states.LevelKeysSG.keys,
        getter=(get_level_id, get_keys),
    ),
)

hints_dialog = Dialog(
    Window(
        Jinja("üí°–ü–æ–¥—Å–∫–∞–∑–∫–∏ —É—Ä–æ–≤–Ω—è {{level_id}}:\n"),
        Jinja(
            "{% if time_hints %}"
            "{{time_hints | time_hints}}"
            "{% else %}"
            "–ø–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π"
            "{% endif %}"
        ),
        ScrollingGroup(
            Select(
                Jinja("{{item | time_hint}}"),
                id="level_hints",
                item_id_getter=lambda x: x.time,
                items="time_hints",
                on_click=start_edit_time_hint,
            ),
            id="level_hints_sg",
            width=1,
            height=10,
        ),
        Button(Const("‚ûï–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É"), id="add_time_hint", on_click=start_add_time_hint),
        Button(
            Const("üëå–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥—Å–∫–∞–∑–æ–∫"),
            id="save",
            on_click=save_hints,
            when=F["dialog_data"]["time_hints"].len() > 1,
        ),
        Button(
            Const("üóë–û—á–∏—Å—Ç–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏"),
            id="clear",
            on_click=clear_hints,
            when=F["dialog_data"]["time_hints"].len() > 0,
        ),
        Cancel(Const("üîô–ù–∞–∑–∞–¥")),
        state=states.LevelHintsSG.time_hints,
        getter=get_time_hints,
        preview_data={
            "time_hints": [],
            "level_id": "Pinky Pie",
        },
    ),
    on_process_result=process_time_hint_result,
    on_start=on_start_hints_edit,
)

bonus_keys_dialog = Dialog(
    Window(
        Jinja("–£—Ä–æ–≤–µ–Ω—å <b>{{level_id}}</b>\n\n"),
        Const("üí∞<b>–ë–æ–Ω—É—Å–Ω—ã–µ –∫–ª—é—á–∏ —É—Ä–æ–≤–Ω—è</b>\n"),
        Jinja(
            "–°–µ–π—á–∞—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –±–æ–Ω—É—Å–Ω—ã–µ –∫–ª—é—á–∏:\n"
            "{% for key in bonus_keys %}"
            "üí∞<code>{{key.text}}</code>: {{key.bonus_minutes}} –º–∏–Ω.\n"
            "{% endfor %}"
            "\n –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –±–æ–Ω—É—Å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ",
            when=F["bonus_keys"],
        ),
        Const(
            "–£ –¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–µ—Ç –±–æ–Ω—É—Å–Ω—ã—Ö –∫–ª—é—á–µ–π. –ö–ª—é—á–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö: ",
            when=~F["bonus_keys"],
        ),
        Const(
            "<code>–°–•–ë–û–ù–£–°–ù–´–ô</code> 2\n"
            "<code>–°–•–®–¢–†–ê–§–ù–û–ô</code> -3\n"
            "<code>–°–•–î–†–£–ì–û–ô–ë–û–ù–£–°–ù–´–ô</code> 5\n"
        ),
        Cancel(Const("üîô–ù–∞–∑–∞–¥")),
        TextInput(
            type_factory=convert_bonus_keys,
            on_success=on_correct_bonus_keys,
            on_error=not_correct_bonus_keys,
            id="keys_input",
        ),
        state=states.LevelBonusKeysSG.bonus_keys,
        getter=(get_level_id, get_bonus_keys),
    ),
)
